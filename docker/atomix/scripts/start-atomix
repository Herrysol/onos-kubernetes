#!/usr/bin/env bash
# Copyright 2018 Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Usage: start-atomix [OPTIONS]
# Starts an Atomix server based on the supplied options.
#     --nodes             The number of nodes in the cluster. The default
#                         value is 1.
#     --data_dir          The directory where the Atomix process will store its
#                         write ahead logs. The default is /var/lib/atomix/data.
#     --log_level         The log level for the Atomix server. Either ERROR,
#                         WARN, INFO, DEBUG, TRACE. The default is INFO.
#     --heap              The maximum amount of heap to use. The format is the
#                         same as that used for the Xmx and Xms parameters to the
#                         JVM. e.g. --heap=2G. The default is 2G.

USER=`whoami`
HOST=`hostname -s`
DOMAIN=`hostname -d`
CONF_DIR="/opt/atomix/conf"
DATA_DIR="/var/lib/atomix/data"
LOG_DIR="/var/log/atomix"
LOG_LEVEL=INFO
NODES=1
HEAP=2G

function print_usage() {
echo "\
Usage: start-atomix [OPTIONS]
Starts an Atomix node based on the supplied options.
    --nodes             The number of nodes in the cluster. The default
                        value is 1.
    --datadir           The directory where the Atomix process will store its
                        write ahead logs. The default is /var/lib/atomix/data.
    --loglevel          The log level for the Atomix server. Either ERROR,
                        WARN, INFO, DEBUG, TRACE. The default is INFO.
    --heap              The maximum amount of heap to use. The format is the
                        same as that used for the Xmx and Xms parameters to the
                        JVM. e.g. --heap=2G. The default is 2G.
"
}

function create_data_dirs() {
    if [ ! -d $DATA_DIR  ]; then
        mkdir -p $DATA_DIR
        chown -R $USER:$USER $DATA_DIR
    fi
    if [ ! -d $LOG_DIR  ]; then
        mkdir -p $LOG_DIR
        chown -R $USER:$USER $LOG_DIR
    fi
}


function print_node() {
    echo "cluster.node.id=$NAME-$((ORD+1))"
    echo "cluster.node.address=$NAME-$ORD.$DOMAIN:5679"
}

function print_discovery() {
    echo "cluster.discovery.type=bootstrap"
    for (( i=1; i<=$NODES; i++ ))
    do
        echo "cluster.discovery.nodes.$i.id=$NAME-$((i))"
        echo "cluster.discovery.nodes.$i.address=$NAME-$((i-1)).$DOMAIN:5679"
    done
}

function print_management_nodes() {
    for (( i=1; i<=$NODES; i++ ))
    do
        echo "management-group.members.$i=$NAME-$((i))"
    done
}

function print_raft_nodes() {
    for (( i=1; i<=$NODES; i++ ))
    do
        echo "partition-groups.raft.members.$i=$NAME-$((i))"
    done
}

function create_config() {
    rm -f "$CONF_DIR/atomix.conf"
    echo "# This file was autogenerated" >> $CONFIG_FILE
    echo "cluster.cluster-id=atomix" >> $CONFIG_FILE
    print_node >> $CONFIG_FILE
    print_discovery >> $CONFIG_FILE
    echo "management-group.type=raft" >> $CONFIG_FILE
    echo "management-group.partitions=1" >> $CONFIG_FILE
    echo "management-group.storage.directory=$DATA_DIR/system" >> $CONFIG_FILE
    print_management_nodes >> $CONFIG_FILE
    echo "partition-groups.raft.type=raft" >> $CONFIG_FILE
    echo "partition-groups.raft.partitions=7" >> $CONFIG_FILE
    echo "partition-groups.raft.storage.directory=$DATA_DIR/raft" >> $CONFIG_FILE
    print_raft_nodes >> $CONFIG_FILE
    cat $CONFIG_FILE >&2
}

optspec=":hv-:"
while getopts "$optspec" optchar; do

    case "${optchar}" in
        -)
            case "${OPTARG}" in
                nodes=*)
                    NODES=${OPTARG##*=}
                    ;;
                datadir=*)
                    DATA_DIR=${OPTARG##*=}
                    ;;
                loglevel=*)
                    LOG_LEVEL=${OPTARG##*=}
                    ;;
                heap=*)
                    HEAP=${OPTARG##*=}
                    ;;
                *)
                    echo "Unknown option --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;
        h)
            print_usage
            exit
            ;;
        v)
            echo "Parsing option: '-${optchar}'" >&2
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done

CONFIG_FILE="$CONF_DIR/atomix.properties"
if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
    NAME=${BASH_REMATCH[1]}
    ORD=${BASH_REMATCH[2]}
else
    echo "Failed to parse name and ordinal of Pod"
    exit 1
    #NAME=test
    #ORD=0
fi

for (( i=1; i<=$NODES; i++ )); do
    until nslookup $NAME-$((i-1)).$DOMAIN; do echo waiting for node $i to become available; sleep 2; done;
done

create_config \
  && create_data_dirs \
  && java \
    -XX:+UseConcMarkSweepGC \
    -XX:+CMSIncrementalMode \
    -Xmx$HEAP \
    -Datomix.root="/opt/atomix" \
    -Datomix.data="$DATA_DIR/atomix-$ORD" \
    -Datomix.log="$LOG_DIR" \
    -Datomix.level="$LOG_LEVEL" \
    -Datomix.config="/opt/atomix/conf/atomix.properties" \
    -Dlogback.configurationFile="/opt/atomix/conf/logback.xml" \
    -Dvertx.disableFileCPResolving=true \
    -cp .:"/opt/atomix/lib/system/*":"/opt/atomix/lib/ext/*" \
    io.atomix.agent.AtomixAgent