#!/usr/bin/env bash
# Copyright 2018 Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Usage: start-onos [OPTIONS]
# Starts an ONOS server based on the supplied options.
#     --service           The name of the Atomix service to which to connect.
#     --replicas          The number of Atomix nodes to which to connect. The default value is 1.
#     --heap              The maximum amount of heap to use. The format is the
#                         same as that used for the Xmx and Xms parameters to the
#                         JVM. e.g. --heap=2G. The default is 2G.

USER=`whoami`
HOST=`hostname -s`
DOMAIN=`hostname -d`
CONFIG_DIR="/root/onos/config"
CONFIG_FILE="$CONFIG_DIR/cluster.json"
HEAP=2G

function print_usage() {
echo "\
Usage: start-onos [OPTIONS]
Starts an ONOS node based on the supplied options.
    --service           The name of the Atomix service to which to connect.
    --replicas          The number of Atomix nodes to which to connect. The default value is 1.
    --heap              The maximum amount of heap to use. The format is the
                        same as that used for the Xmx and Xms parameters to the
                        JVM. e.g. --heap=2G. The default is 2G.
"
}

function print_config() {
    echo "{"
    print_name
    print_node
    print_storage
    echo "}"
}

function print_name() {
    echo "  \"name\": \"atomix\","
}

function print_node() {
    echo "  \"node\": {"
    echo "    \"id\": \"$HOST\","
    echo "    \"host\": \"$HOST\","
    echo "    \"port\": 9876"
    echo "  },"
}

function print_storage() {
    echo "  \"storage\": ["
    nodes="${#ATOMIX_NODES[@]}"/3
    last_node=$(($nodes-1))
    for (( i=0; i<$nodes; i++ ))
    do
        start=$(($i*3))
        node=("${ATOMIX_NODES[@]:$start:3}")
        if [ $i -eq $last_node ]; then
            echo "    {"
            echo "      \"id\": \"${node[0]}\","
            echo "      \"host\": \"${node[1]}\","
            echo "      \"port\": ${node[2]}"
            echo "    }"
        else
            echo "    {"
            echo "      \"id\": \"${node[0]}\","
            echo "      \"host\": \"${node[1]}\","
            echo "      \"port\": ${node[2]}"
            echo "    },"
        fi
    done
    echo "  ]"
}

function create_config() {
    rm -f CONFIG_FILE
    mkdir -p $CONFIG_DIR
    print_config > $CONFIG_FILE
    cat $CONFIG_FILE >&2
}

optspec=":hv-:"
while getopts "$optspec" optchar; do

    case "${optchar}" in
        -)
            case "${OPTARG}" in
                service=*)
                    ATOMIX_SERVICE=${OPTARG##*=}
                    ;;
                replicas=*)
                    ATOMIX_REPLICAS=${OPTARG##*=}
                    ;;
                heap=*)
                    HEAP=${OPTARG##*=}
                    ;;
                *)
                    echo "Unknown option --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;
        h)
            print_usage
            exit
            ;;
        v)
            echo "Parsing option: '-${optchar}'" >&2
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done

while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$ATOMIX_SERVICE-hs:5678/v1/status)" != "200" ]]; do
    echo "Waiting for Atomix service"
    sleep 5;
done

ATOMIX_NODES=($(curl -s http://$ATOMIX_SERVICE-hs:5678/v1/cluster/nodes | jq -r '.[] | "\(.id) \(.host) \(.port)"'))

create_config && ./bin/onos-service start server