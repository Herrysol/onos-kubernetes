#!/usr/bin/env bash
# Copyright 2018 Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

USER=`whoami`
HOST=`hostname -s`
DOMAIN=`hostname -d`
DATA_DIR="/var/lib/atomix/data"
LOG_DIR="/var/log/atomix"
LOG_LEVEL=INFO
NODES=1
HEAP=2G

function print_usage() {
echo "\
Usage: create-config [OPTIONS]
Creates an Atomix configuration from the supplied arguments.
    --nodes             The number of nodes in the cluster. The default value is 1.
"
}

function print_node() {
    echo "cluster.node.id=$NAME-$((ORD+1))"
    echo "cluster.node.address=$NAME-$ORD.$DOMAIN:5679"
}

function print_discovery() {
    echo "cluster.discovery.type=bootstrap"
    for (( i=1; i<=$NODES; i++ ))
    do
        echo "cluster.discovery.nodes.$i.id=$NAME-$((i))"
        echo "cluster.discovery.nodes.$i.address=$NAME-$((i-1)).$DOMAIN:5679"
    done
}

function print_management_nodes() {
    for (( i=1; i<=$NODES; i++ ))
    do
        echo "management-group.members.$i=$NAME-$((i))"
    done
}

function print_raft_nodes() {
    for (( i=1; i<=$NODES; i++ ))
    do
        echo "partition-groups.raft.members.$i=$NAME-$((i))"
    done
}

function create_config() {
    echo "cluster.cluster-id=atomix"
    print_node
    print_discovery
    echo "management-group.type=raft"
    echo "management-group.partitions=1"
    print_management_nodes
    echo "partition-groups.raft.type=raft"
    echo "partition-groups.raft.partitions=7"
    print_raft_nodes
}

optspec=":hv-:"
while getopts "$optspec" optchar; do

    case "${optchar}" in
        -)
            case "${OPTARG}" in
                nodes=*)
                    NODES=${OPTARG##*=}
                    ;;
                *)
                    echo "Unknown option --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;
        h)
            print_usage
            exit
            ;;
        v)
            echo "Parsing option: '-${optchar}'" >&2
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done

if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
    NAME=${BASH_REMATCH[1]}
    ORD=${BASH_REMATCH[2]}
else
    echo "Failed to parse name and ordinal of Pod"
    exit 1
    #NAME=test
    #ORD=0
fi

create_config
